{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/crop/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;IAoC9C,wBAAiB;;;;IACzC;;;;;OAKG;;;;;;;IAIH,mBAAI;;;;;;cAAC,WAAmB,EAAE,OAAqB;QAC7C,MAAM,CAAC;KACR;;gBAbF,UAAU;;;QAQR,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oCAGD;;;;;;;;;;;;;;;;;;;;;IAZU,IAAI;QARhB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,qBAAqB;YAC7B,SAAS,EAAE,SAAS;YACpB,IAAI,EAAE,+CAA+C;YACrD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,IAAI,EAahB;eAlDD;EAqC0B,iBAAiB;SAA9B,IAAI","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CropOptions {\n  quality?: number;\n  targetHeight?: number;\n  targetWidth?: number;\n}\n\n/**\n * @name Crop\n * @description Crops images\n * @usage\n * ```typescript\n * import { Crop } from '@ionic-native/crop';\n *\n * constructor(private crop: Crop) { }\n *\n * ...\n *\n * this.crop.crop('path/to/image.jpg', {quality: 75})\n *   .then(\n *     newImage => console.log('new image path is: ' + newImage),\n *     error => console.error('Error cropping image', error)\n *   );\n * ```\n * @interfaces\n * CropOptions\n */\n@Plugin({\n  pluginName: 'Crop',\n  plugin: 'cordova-plugin-crop',\n  pluginRef: 'plugins',\n  repo: 'https://github.com/jeduan/cordova-plugin-crop',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class Crop extends IonicNativePlugin {\n  /**\n   * Crops an image\n   * @param {string} pathToImage\n   * @param {CropOptions} [options]\n   * @returns {Promise<string>} Returns a promise that resolves with the new image path, or rejects if failed to crop.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  crop(pathToImage: string, options?: CropOptions): Promise<string> {\n    return;\n  }\n}\n"]}